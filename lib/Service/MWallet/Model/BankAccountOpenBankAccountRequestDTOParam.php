<?php
/**
 * BankAccountOpenBankAccountRequestDTOParam
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 会员钱包
 *
 * <p>中台会员钱包</p>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\MWallet\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * BankAccountOpenBankAccountRequestDTOParam Class Doc Comment
 *
 * @category Class
 * @description 方法签名第0个参数，请自行修改arg0等参数的名字
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankAccountOpenBankAccountRequestDTOParam implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankAccountOpenBankAccountRequestDTOParam';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'parentMerchantNo' => 'string',
        'merchantNo' => 'string',
        'initiateMerchantNo' => 'string',
        'requestNo' => 'string',
        'businessCode' => 'string',
        'merchantMemberNo' => 'string',
        'accountType' => 'string',
        'bankAccountLevel' => 'string',
        'marketProductCode' => 'string',
        'memberInfo' => '\Yeepay\Yop\Sdk\Service\MWallet\Model\BankAccountOpenAccountMemberDTOParam'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'parentMerchantNo' => null,
        'merchantNo' => null,
        'initiateMerchantNo' => null,
        'requestNo' => null,
        'businessCode' => null,
        'merchantMemberNo' => null,
        'accountType' => null,
        'bankAccountLevel' => null,
        'marketProductCode' => null,
        'memberInfo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parentMerchantNo' => 'parentMerchantNo',
        'merchantNo' => 'merchantNo',
        'initiateMerchantNo' => 'initiateMerchantNo',
        'requestNo' => 'requestNo',
        'businessCode' => 'businessCode',
        'merchantMemberNo' => 'merchantMemberNo',
        'accountType' => 'accountType',
        'bankAccountLevel' => 'bankAccountLevel',
        'marketProductCode' => 'marketProductCode',
        'memberInfo' => 'memberInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parentMerchantNo' => 'setParentMerchantNo',
        'merchantNo' => 'setMerchantNo',
        'initiateMerchantNo' => 'setInitiateMerchantNo',
        'requestNo' => 'setRequestNo',
        'businessCode' => 'setBusinessCode',
        'merchantMemberNo' => 'setMerchantMemberNo',
        'accountType' => 'setAccountType',
        'bankAccountLevel' => 'setBankAccountLevel',
        'marketProductCode' => 'setMarketProductCode',
        'memberInfo' => 'setMemberInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parentMerchantNo' => 'getParentMerchantNo',
        'merchantNo' => 'getMerchantNo',
        'initiateMerchantNo' => 'getInitiateMerchantNo',
        'requestNo' => 'getRequestNo',
        'businessCode' => 'getBusinessCode',
        'merchantMemberNo' => 'getMerchantMemberNo',
        'accountType' => 'getAccountType',
        'bankAccountLevel' => 'getBankAccountLevel',
        'marketProductCode' => 'getMarketProductCode',
        'memberInfo' => 'getMemberInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parentMerchantNo'] = isset($data['parentMerchantNo']) ? $data['parentMerchantNo'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['initiateMerchantNo'] = isset($data['initiateMerchantNo']) ? $data['initiateMerchantNo'] : null;
        $this->container['requestNo'] = isset($data['requestNo']) ? $data['requestNo'] : null;
        $this->container['businessCode'] = isset($data['businessCode']) ? $data['businessCode'] : null;
        $this->container['merchantMemberNo'] = isset($data['merchantMemberNo']) ? $data['merchantMemberNo'] : null;
        $this->container['accountType'] = isset($data['accountType']) ? $data['accountType'] : null;
        $this->container['bankAccountLevel'] = isset($data['bankAccountLevel']) ? $data['bankAccountLevel'] : null;
        $this->container['marketProductCode'] = isset($data['marketProductCode']) ? $data['marketProductCode'] : null;
        $this->container['memberInfo'] = isset($data['memberInfo']) ? $data['memberInfo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parentMerchantNo
     *
     * @return string
     */
    public function getParentMerchantNo()
    {
        return $this->container['parentMerchantNo'];
    }

    /**
     * Sets parentMerchantNo
     *
     * @param string $parentMerchantNo parentMerchantNo
     *
     * @return $this
     */
    public function setParentMerchantNo($parentMerchantNo)
    {
        $this->container['parentMerchantNo'] = $parentMerchantNo;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo merchantNo
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets initiateMerchantNo
     *
     * @return string
     */
    public function getInitiateMerchantNo()
    {
        return $this->container['initiateMerchantNo'];
    }

    /**
     * Sets initiateMerchantNo
     *
     * @param string $initiateMerchantNo initiateMerchantNo
     *
     * @return $this
     */
    public function setInitiateMerchantNo($initiateMerchantNo)
    {
        $this->container['initiateMerchantNo'] = $initiateMerchantNo;

        return $this;
    }

    /**
     * Gets requestNo
     *
     * @return string
     */
    public function getRequestNo()
    {
        return $this->container['requestNo'];
    }

    /**
     * Sets requestNo
     *
     * @param string $requestNo requestNo
     *
     * @return $this
     */
    public function setRequestNo($requestNo)
    {
        $this->container['requestNo'] = $requestNo;

        return $this;
    }

    /**
     * Gets businessCode
     *
     * @return string
     */
    public function getBusinessCode()
    {
        return $this->container['businessCode'];
    }

    /**
     * Sets businessCode
     *
     * @param string $businessCode businessCode
     *
     * @return $this
     */
    public function setBusinessCode($businessCode)
    {
        $this->container['businessCode'] = $businessCode;

        return $this;
    }

    /**
     * Gets merchantMemberNo
     *
     * @return string
     */
    public function getMerchantMemberNo()
    {
        return $this->container['merchantMemberNo'];
    }

    /**
     * Sets merchantMemberNo
     *
     * @param string $merchantMemberNo merchantMemberNo
     *
     * @return $this
     */
    public function setMerchantMemberNo($merchantMemberNo)
    {
        $this->container['merchantMemberNo'] = $merchantMemberNo;

        return $this;
    }

    /**
     * Gets accountType
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['accountType'];
    }

    /**
     * Sets accountType
     *
     * @param string $accountType accountType
     *
     * @return $this
     */
    public function setAccountType($accountType)
    {
        $this->container['accountType'] = $accountType;

        return $this;
    }

    /**
     * Gets bankAccountLevel
     *
     * @return string
     */
    public function getBankAccountLevel()
    {
        return $this->container['bankAccountLevel'];
    }

    /**
     * Sets bankAccountLevel
     *
     * @param string $bankAccountLevel bankAccountLevel
     *
     * @return $this
     */
    public function setBankAccountLevel($bankAccountLevel)
    {
        $this->container['bankAccountLevel'] = $bankAccountLevel;

        return $this;
    }

    /**
     * Gets marketProductCode
     *
     * @return string
     */
    public function getMarketProductCode()
    {
        return $this->container['marketProductCode'];
    }

    /**
     * Sets marketProductCode
     *
     * @param string $marketProductCode marketProductCode
     *
     * @return $this
     */
    public function setMarketProductCode($marketProductCode)
    {
        $this->container['marketProductCode'] = $marketProductCode;

        return $this;
    }

    /**
     * Gets memberInfo
     *
     * @return \Yeepay\Yop\Sdk\Service\MWallet\Model\BankAccountOpenAccountMemberDTOParam
     */
    public function getMemberInfo()
    {
        return $this->container['memberInfo'];
    }

    /**
     * Sets memberInfo
     *
     * @param \Yeepay\Yop\Sdk\Service\MWallet\Model\BankAccountOpenAccountMemberDTOParam $memberInfo memberInfo
     *
     * @return $this
     */
    public function setMemberInfo($memberInfo)
    {
        $this->container['memberInfo'] = $memberInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


