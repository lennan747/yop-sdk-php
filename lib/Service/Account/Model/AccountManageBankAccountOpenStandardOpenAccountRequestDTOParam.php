<?php
/**
 * AccountManageBankAccountOpenStandardOpenAccountRequestDTOParam
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 账户
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * AccountManageBankAccountOpenStandardOpenAccountRequestDTOParam Class Doc Comment
 *
 * @category Class
 * @description 开立银行账户请求
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountManageBankAccountOpenStandardOpenAccountRequestDTOParam implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountManageBankAccountOpenStandardOpenAccountRequestDTOParam';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'requestNo' => 'string',
        'initiateMerchantNo' => 'string',
        'parentMerchantNo' => 'string',
        'merchantNo' => 'string',
        'merchantName' => 'string',
        'openBankCode' => 'string',
        'openAccountType' => 'string',
        'certificateType' => 'string',
        'certificateNo' => 'string',
        'notifyUrl' => 'string',
        'appKey' => 'string',
        'xibOpenAccountDTO' => '\Yeepay\Yop\Sdk\Service\Account\Model\AccountManageBankAccountOpenXibOpenAccountDTOParam'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'requestNo' => null,
        'initiateMerchantNo' => null,
        'parentMerchantNo' => null,
        'merchantNo' => null,
        'merchantName' => null,
        'openBankCode' => null,
        'openAccountType' => null,
        'certificateType' => null,
        'certificateNo' => null,
        'notifyUrl' => null,
        'appKey' => null,
        'xibOpenAccountDTO' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'requestNo' => 'requestNo',
        'initiateMerchantNo' => 'initiateMerchantNo',
        'parentMerchantNo' => 'parentMerchantNo',
        'merchantNo' => 'merchantNo',
        'merchantName' => 'merchantName',
        'openBankCode' => 'openBankCode',
        'openAccountType' => 'openAccountType',
        'certificateType' => 'certificateType',
        'certificateNo' => 'certificateNo',
        'notifyUrl' => 'notifyUrl',
        'appKey' => 'appKey',
        'xibOpenAccountDTO' => 'xibOpenAccountDTO'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'requestNo' => 'setRequestNo',
        'initiateMerchantNo' => 'setInitiateMerchantNo',
        'parentMerchantNo' => 'setParentMerchantNo',
        'merchantNo' => 'setMerchantNo',
        'merchantName' => 'setMerchantName',
        'openBankCode' => 'setOpenBankCode',
        'openAccountType' => 'setOpenAccountType',
        'certificateType' => 'setCertificateType',
        'certificateNo' => 'setCertificateNo',
        'notifyUrl' => 'setNotifyUrl',
        'appKey' => 'setAppKey',
        'xibOpenAccountDTO' => 'setXibOpenAccountDTO'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'requestNo' => 'getRequestNo',
        'initiateMerchantNo' => 'getInitiateMerchantNo',
        'parentMerchantNo' => 'getParentMerchantNo',
        'merchantNo' => 'getMerchantNo',
        'merchantName' => 'getMerchantName',
        'openBankCode' => 'getOpenBankCode',
        'openAccountType' => 'getOpenAccountType',
        'certificateType' => 'getCertificateType',
        'certificateNo' => 'getCertificateNo',
        'notifyUrl' => 'getNotifyUrl',
        'appKey' => 'getAppKey',
        'xibOpenAccountDTO' => 'getXibOpenAccountDTO'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['requestNo'] = isset($data['requestNo']) ? $data['requestNo'] : null;
        $this->container['initiateMerchantNo'] = isset($data['initiateMerchantNo']) ? $data['initiateMerchantNo'] : null;
        $this->container['parentMerchantNo'] = isset($data['parentMerchantNo']) ? $data['parentMerchantNo'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['merchantName'] = isset($data['merchantName']) ? $data['merchantName'] : null;
        $this->container['openBankCode'] = isset($data['openBankCode']) ? $data['openBankCode'] : null;
        $this->container['openAccountType'] = isset($data['openAccountType']) ? $data['openAccountType'] : null;
        $this->container['certificateType'] = isset($data['certificateType']) ? $data['certificateType'] : null;
        $this->container['certificateNo'] = isset($data['certificateNo']) ? $data['certificateNo'] : null;
        $this->container['notifyUrl'] = isset($data['notifyUrl']) ? $data['notifyUrl'] : null;
        $this->container['appKey'] = isset($data['appKey']) ? $data['appKey'] : null;
        $this->container['xibOpenAccountDTO'] = isset($data['xibOpenAccountDTO']) ? $data['xibOpenAccountDTO'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets requestNo
     *
     * @return string
     */
    public function getRequestNo()
    {
        return $this->container['requestNo'];
    }

    /**
     * Sets requestNo
     *
     * @param string $requestNo requestNo
     *
     * @return $this
     */
    public function setRequestNo($requestNo)
    {
        $this->container['requestNo'] = $requestNo;

        return $this;
    }

    /**
     * Gets initiateMerchantNo
     *
     * @return string
     */
    public function getInitiateMerchantNo()
    {
        return $this->container['initiateMerchantNo'];
    }

    /**
     * Sets initiateMerchantNo
     *
     * @param string $initiateMerchantNo initiateMerchantNo
     *
     * @return $this
     */
    public function setInitiateMerchantNo($initiateMerchantNo)
    {
        $this->container['initiateMerchantNo'] = $initiateMerchantNo;

        return $this;
    }

    /**
     * Gets parentMerchantNo
     *
     * @return string
     */
    public function getParentMerchantNo()
    {
        return $this->container['parentMerchantNo'];
    }

    /**
     * Sets parentMerchantNo
     *
     * @param string $parentMerchantNo parentMerchantNo
     *
     * @return $this
     */
    public function setParentMerchantNo($parentMerchantNo)
    {
        $this->container['parentMerchantNo'] = $parentMerchantNo;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo merchantNo
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets merchantName
     *
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchantName'];
    }

    /**
     * Sets merchantName
     *
     * @param string $merchantName merchantName
     *
     * @return $this
     */
    public function setMerchantName($merchantName)
    {
        $this->container['merchantName'] = $merchantName;

        return $this;
    }

    /**
     * Gets openBankCode
     *
     * @return string
     */
    public function getOpenBankCode()
    {
        return $this->container['openBankCode'];
    }

    /**
     * Sets openBankCode
     *
     * @param string $openBankCode openBankCode
     *
     * @return $this
     */
    public function setOpenBankCode($openBankCode)
    {
        $this->container['openBankCode'] = $openBankCode;

        return $this;
    }

    /**
     * Gets openAccountType
     *
     * @return string
     */
    public function getOpenAccountType()
    {
        return $this->container['openAccountType'];
    }

    /**
     * Sets openAccountType
     *
     * @param string $openAccountType openAccountType
     *
     * @return $this
     */
    public function setOpenAccountType($openAccountType)
    {
        $this->container['openAccountType'] = $openAccountType;

        return $this;
    }

    /**
     * Gets certificateType
     *
     * @return string
     */
    public function getCertificateType()
    {
        return $this->container['certificateType'];
    }

    /**
     * Sets certificateType
     *
     * @param string $certificateType certificateType
     *
     * @return $this
     */
    public function setCertificateType($certificateType)
    {
        $this->container['certificateType'] = $certificateType;

        return $this;
    }

    /**
     * Gets certificateNo
     *
     * @return string
     */
    public function getCertificateNo()
    {
        return $this->container['certificateNo'];
    }

    /**
     * Sets certificateNo
     *
     * @param string $certificateNo certificateNo
     *
     * @return $this
     */
    public function setCertificateNo($certificateNo)
    {
        $this->container['certificateNo'] = $certificateNo;

        return $this;
    }

    /**
     * Gets notifyUrl
     *
     * @return string
     */
    public function getNotifyUrl()
    {
        return $this->container['notifyUrl'];
    }

    /**
     * Sets notifyUrl
     *
     * @param string $notifyUrl notifyUrl
     *
     * @return $this
     */
    public function setNotifyUrl($notifyUrl)
    {
        $this->container['notifyUrl'] = $notifyUrl;

        return $this;
    }

    /**
     * Gets appKey
     *
     * @return string
     */
    public function getAppKey()
    {
        return $this->container['appKey'];
    }

    /**
     * Sets appKey
     *
     * @param string $appKey appKey
     *
     * @return $this
     */
    public function setAppKey($appKey)
    {
        $this->container['appKey'] = $appKey;

        return $this;
    }

    /**
     * Gets xibOpenAccountDTO
     *
     * @return \Yeepay\Yop\Sdk\Service\Account\Model\AccountManageBankAccountOpenXibOpenAccountDTOParam
     */
    public function getXibOpenAccountDTO()
    {
        return $this->container['xibOpenAccountDTO'];
    }

    /**
     * Sets xibOpenAccountDTO
     *
     * @param \Yeepay\Yop\Sdk\Service\Account\Model\AccountManageBankAccountOpenXibOpenAccountDTOParam $xibOpenAccountDTO xibOpenAccountDTO
     *
     * @return $this
     */
    public function setXibOpenAccountDTO($xibOpenAccountDTO)
    {
        $this->container['xibOpenAccountDTO'] = $xibOpenAccountDTO;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


