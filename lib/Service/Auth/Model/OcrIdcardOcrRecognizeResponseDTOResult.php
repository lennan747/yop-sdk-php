<?php
/**
 * OcrIdcardOcrRecognizeResponseDTOResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 认证
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Auth\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * OcrIdcardOcrRecognizeResponseDTOResult Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OcrIdcardOcrRecognizeResponseDTOResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OcrIdcardOcrRecognizeResponseDTOResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'status' => 'string',
        'idCardNumber' => 'string',
        'name' => 'string',
        'gender' => 'string',
        'nation' => 'string',
        'birthDate' => 'string',
        'address' => 'string',
        'issueDate' => 'string',
        'validDate' => 'string',
        'expireBeginDate' => 'string',
        'expireEndDate' => 'string',
        'issueAuthority' => 'string',
        'code' => 'string',
        'message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'status' => null,
        'idCardNumber' => null,
        'name' => null,
        'gender' => null,
        'nation' => null,
        'birthDate' => null,
        'address' => null,
        'issueDate' => null,
        'validDate' => null,
        'expireBeginDate' => null,
        'expireEndDate' => null,
        'issueAuthority' => null,
        'code' => null,
        'message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'idCardNumber' => 'idCardNumber',
        'name' => 'name',
        'gender' => 'gender',
        'nation' => 'nation',
        'birthDate' => 'birthDate',
        'address' => 'address',
        'issueDate' => 'issueDate',
        'validDate' => 'validDate',
        'expireBeginDate' => 'expireBeginDate',
        'expireEndDate' => 'expireEndDate',
        'issueAuthority' => 'issueAuthority',
        'code' => 'code',
        'message' => 'message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'idCardNumber' => 'setIdCardNumber',
        'name' => 'setName',
        'gender' => 'setGender',
        'nation' => 'setNation',
        'birthDate' => 'setBirthDate',
        'address' => 'setAddress',
        'issueDate' => 'setIssueDate',
        'validDate' => 'setValidDate',
        'expireBeginDate' => 'setExpireBeginDate',
        'expireEndDate' => 'setExpireEndDate',
        'issueAuthority' => 'setIssueAuthority',
        'code' => 'setCode',
        'message' => 'setMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'idCardNumber' => 'getIdCardNumber',
        'name' => 'getName',
        'gender' => 'getGender',
        'nation' => 'getNation',
        'birthDate' => 'getBirthDate',
        'address' => 'getAddress',
        'issueDate' => 'getIssueDate',
        'validDate' => 'getValidDate',
        'expireBeginDate' => 'getExpireBeginDate',
        'expireEndDate' => 'getExpireEndDate',
        'issueAuthority' => 'getIssueAuthority',
        'code' => 'getCode',
        'message' => 'getMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['idCardNumber'] = isset($data['idCardNumber']) ? $data['idCardNumber'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['nation'] = isset($data['nation']) ? $data['nation'] : null;
        $this->container['birthDate'] = isset($data['birthDate']) ? $data['birthDate'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['issueDate'] = isset($data['issueDate']) ? $data['issueDate'] : null;
        $this->container['validDate'] = isset($data['validDate']) ? $data['validDate'] : null;
        $this->container['expireBeginDate'] = isset($data['expireBeginDate']) ? $data['expireBeginDate'] : null;
        $this->container['expireEndDate'] = isset($data['expireEndDate']) ? $data['expireEndDate'] : null;
        $this->container['issueAuthority'] = isset($data['issueAuthority']) ? $data['issueAuthority'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 认证状态
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets idCardNumber
     *
     * @return string
     */
    public function getIdCardNumber()
    {
        return $this->container['idCardNumber'];
    }

    /**
     * Sets idCardNumber
     *
     * @param string $idCardNumber 身份证号
     *
     * @return $this
     */
    public function setIdCardNumber($idCardNumber)
    {
        $this->container['idCardNumber'] = $idCardNumber;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 姓名
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender 性别
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets nation
     *
     * @return string
     */
    public function getNation()
    {
        return $this->container['nation'];
    }

    /**
     * Sets nation
     *
     * @param string $nation 民族
     *
     * @return $this
     */
    public function setNation($nation)
    {
        $this->container['nation'] = $nation;

        return $this;
    }

    /**
     * Gets birthDate
     *
     * @return string
     */
    public function getBirthDate()
    {
        return $this->container['birthDate'];
    }

    /**
     * Sets birthDate
     *
     * @param string $birthDate 出生日期
     *
     * @return $this
     */
    public function setBirthDate($birthDate)
    {
        $this->container['birthDate'] = $birthDate;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address 地址
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets issueDate
     *
     * @return string
     */
    public function getIssueDate()
    {
        return $this->container['issueDate'];
    }

    /**
     * Sets issueDate
     *
     * @param string $issueDate 签发日期
     *
     * @return $this
     */
    public function setIssueDate($issueDate)
    {
        $this->container['issueDate'] = $issueDate;

        return $this;
    }

    /**
     * Gets validDate
     *
     * @return string
     */
    public function getValidDate()
    {
        return $this->container['validDate'];
    }

    /**
     * Sets validDate
     *
     * @param string $validDate 身份证有效期
     *
     * @return $this
     */
    public function setValidDate($validDate)
    {
        $this->container['validDate'] = $validDate;

        return $this;
    }

    /**
     * Gets expireBeginDate
     *
     * @return string
     */
    public function getExpireBeginDate()
    {
        return $this->container['expireBeginDate'];
    }

    /**
     * Sets expireBeginDate
     *
     * @param string $expireBeginDate 有效期开始时间
     *
     * @return $this
     */
    public function setExpireBeginDate($expireBeginDate)
    {
        $this->container['expireBeginDate'] = $expireBeginDate;

        return $this;
    }

    /**
     * Gets expireEndDate
     *
     * @return string
     */
    public function getExpireEndDate()
    {
        return $this->container['expireEndDate'];
    }

    /**
     * Sets expireEndDate
     *
     * @param string $expireEndDate 有效期结束时间
     *
     * @return $this
     */
    public function setExpireEndDate($expireEndDate)
    {
        $this->container['expireEndDate'] = $expireEndDate;

        return $this;
    }

    /**
     * Gets issueAuthority
     *
     * @return string
     */
    public function getIssueAuthority()
    {
        return $this->container['issueAuthority'];
    }

    /**
     * Sets issueAuthority
     *
     * @param string $issueAuthority 签发单位
     *
     * @return $this
     */
    public function setIssueAuthority($issueAuthority)
    {
        $this->container['issueAuthority'] = $issueAuthority;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code 错误码
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message 错误信息
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


